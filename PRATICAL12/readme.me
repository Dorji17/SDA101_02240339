Overview
The Custom Card Component is a reusable web component built with Web Components and Shadow DOM. It allows you to create customizable cards with slots for a header, image, content, and footer. The card can be easily styled using CSS variables and comes with an interactive hover effect.

This component is designed to be lightweight, flexible, and easy to integrate into any web project. It provides a simple interface for dynamically injecting content into different sections of the card.

Features
Customizable Layout: The card has slots for header, image, content, and footer.
CSS Variables: Easily change the background color, text color, and other styling options using CSS variables.
Responsive: The card is responsive and adjusts based on the content size.
Hover Effect: The card has a subtle hover effect for better interactivity.
Fallback Content: Default content is provided in each slot to ensure the card looks good even if some slots are empty.
Demo
You can view a demo of the component by copying the HTML and JavaScript code provided below into your project.

Installation
Include the Custom Card HTML:
Copy the HTML structure of the custom-card component into your webpage.

Include the JavaScript File:
Link to the component.js file, which defines the custom-card custom element.

Usage
HTML
html
Copy code
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Custom Card Component</title>
  </head>
  <body>
    <!-- Example usage of the custom card component -->
    <custom-card style="--card-bg-color: #f9f9f9">
      <span slot="header">Poem</span>
      <img slot="image" src="pic.jpeg" alt="Sample Image" />
      <span slot="content">
        "If my heart could speak, <br />
        it would say to you,<br />
        I will not let you go, I will hold you <br />
        in my arms forever"
      </span>
      <span slot="footer">Learn More</span>
    </custom-card>

    <custom-card style="--card-bg-color: #f9f9f9">
      <span slot="header">Poem</span>
      <img slot="image" src="pic.jpeg" alt="Sample Image" />
      <span slot="content">
        "If my heart could speak, <br />
        it would say to you,<br />
        I will not let you go, I will hold you <br />
        in my arms forever."
      </span>
      <span slot="footer">Learn More</span>
    </custom-card>

    <!-- Link to the JavaScript that defines the custom card component -->
    <script src="component.js"></script>
  </body>
</html>
JavaScript (component.js)
javascript
Copy code
class CustomCard extends HTMLElement {
  constructor() {
    super();

    // Attach Shadow DOM
    this.attachShadow({ mode: "open" });

    // Define the HTML structure and styles for the custom card
    this.shadowRoot.innerHTML = `
      <style>
        /* Component container */
        :host {
          display: inline-block;
          border: 1px solid #ddd;
          border-radius: 8px;
          background-color: var(--card-bg-color, #fff);
          color: var(--card-text-color, #333);
          max-width: 300px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
          font-family: Arial, sans-serif;
          overflow: hidden;
          transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        :host(:hover) {
          transform: translateY(-5px);
          box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
        }

        /* Header styling */
        .header {
          padding: 16px;
          background-color: var(--header-bg-color, #eee);
          font-weight: bold;
          text-align: center;
          border-bottom: 1px solid #ddd;
        }

        /* Image container styling */
        .image-container {
          width: 100%;
          height: 200px;
          overflow: hidden;
        }

        .image {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }

        /* Content styling */
        .content {
          padding: 16px;
          text-align: left;
        }

        /* Footer styling */
        .footer {
          padding: 16px;
          background-color: var(--footer-bg-color, #eee);
          text-align: center;
          border-top: 1px solid #ddd;
        }
      </style>

      <div class="header">
        <slot name="header">Default Header</slot>
      </div>
      <div class="image-container">
        <slot name="image">
          <img class="image" src="https://via.placeholder.com/300x200" alt="Default Image" />
        </slot>
      </div>
      <div class="content">
        <slot name="content">Default Content</slot>
      </div>
      <div class="footer">
        <slot name="footer">Default Footer</slot>
      </div>
    `;
  }
}

// Define the custom card component
customElements.define("custom-card", CustomCard);
Customization
Using CSS Variables
You can easily customize the card by overriding the default CSS variables. For example:

html
Copy code
<custom-card style="--card-bg-color: #f0f0f0; --header-bg-color: #4CAF50; --footer-bg-color: #333;">
  <span slot="header">Custom Header</span>
  <img slot="image" src="pic.jpeg" alt="Sample Image" />
  <span slot="content">Custom content goes here.</span>
  <span slot="footer">Learn More</span>
</custom-card>
Here’s a list of available CSS variables you can customize:

--card-bg-color: Background color of the card (default: #fff).
--header-bg-color: Background color of the header (default: #eee).
--footer-bg-color: Background color of the footer (default: #eee).
--card-text-color: Text color for the card content (default: #333).
Notes
Slot Fallbacks: If any slot is not provided, fallback content will be shown.
Image Fallback: If no image is provided in the image slot, a placeholder image will appear by default.
License
This project is licensed under the MIT License - see the LICENSE file for details.

Contribution
Feel free to fork the repository and submit pull requests. Contributions are welcome! If you have any feature requests or bug fixes, please open an issue.

Reflection
The Custom Card Component is modular and reusable, making it easy to integrate into any project.
With CSS variables, users can easily modify the appearance without modifying the component’s core styles.
The card's interactive hover effect and slot-based content injection make it flexible and user-friendly.
